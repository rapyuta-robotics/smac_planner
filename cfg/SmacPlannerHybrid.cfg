#!/usr/bin/env python
# Smac Planner Hybrid configuration

from dynamic_reconfigure.parameter_generator_catkin import ParameterGenerator, double_t, int_t, bool_t
PACKAGE = "nav2_smac_planner"

gen = ParameterGenerator()

gen.add("smooth_path", bool_t, 0, "Whether or not to smooth the resulting paths", False)
gen.add("debug_visualizations", bool_t, 0, "Whether to publish expansions on the /expansions topic as an array of poses (the orientation has no meaning) and the path's footprints on the /planned_footprints topic. WARNING: heavy to compute and to display, for debug only as it degrades the performance", True)

grp_downsampling = gen.add_group("Downsampling", type="tab")
grp_downsampling.add("downsample_costmap", bool_t, 0, "whether or not to downsample the map", False)
grp_downsampling.add("downsampling_factor", int_t, 0, "multiplier for the resolution of the costmap layer (e.g. 2 on a 5cm costmap would be 10cm)", 1, 1, 100)

grp_planning = gen.add_group("Planning", type="tab")
grp_planning.add("tolerance", double_t, 0, "tolerance for planning if unable to reach exact pose, in meters", 0.25, 0.0, 10.0)
grp_planning.add("allow_unknown", bool_t, 0, "allow traveling in unknown space", True)
grp_planning.add("max_iterations", int_t, 0, "maximum total iterations to search for before failing (in case unreachable), set to -1 to disable", 1000000, -1, 10000000)
grp_planning.add("max_on_approach_iterations", int_t, 0, "maximum number of iterations to attempt to reach goal once in tolerance", 1000, -1, 10000);
grp_planning.add("max_planning_time", double_t, 0, "max time in s for planner to plan, smooth, and upsample. Will scale maximum smoothing and upsampling times based on remaining time after planning.", 5.0, 0.0, 100.0);
grp_planning.add("terminal_checking_interval", int_t, 0, "number of iterations between checking if the goal has been cancelled or planner timed out", 5000, 1, 100000)

motion_model_enum = gen.enum([
    gen.const("DUBIN", int_t, 2, "Dubins path motion model"),
    gen.const("REEDS_SHEPP", int_t, 3, "Reeds-Shepp motion model")
], "Motion model")

grp_searching = gen.add_group("Searching", type="tab")
grp_searching.add("motion_model_for_search", int_t, 0, "", 2, 2, 3, edit_method=motion_model_enum)
grp_searching.add("analytic_expansion_ratio", double_t, 0, "The ratio to attempt analytic expansions during search for final approach", 3.5, 0.0, 10.0)
grp_searching.add("analytic_expansion_max_length", double_t, 0, "The maximum length of the analytic expansion to be considered valid to prevent unsafe shortcutting (in meters). This should be scaled with minimum turning radius and be no less than 4-5x the minimum radius", 3.0, 0, 10.0)
grp_searching.add("analytic_expansion_max_cost", double_t, 0, "The maximum single cost for any part of an analytic expansion to contain and be valid (except when necessary on approach to goal)", 200.0, 0, 1000.0)
grp_searching.add("analytic_expansion_max_cost_override", bool_t, 0, "Whether or not to override the maximum cost setting if within critical distance to goal (ie probably required)", False)
grp_searching.add("allow_primitive_interpolation", bool_t, 0, False)
grp_searching.add("cache_obstacle_heuristic", bool_t, 0, "Cache the obstacle map dynamic programming distance expansion heuristic between subsequent replannings of the same goal location. Dramatically speeds up replanning performance (40x) if costmap is largely static", False)
grp_searching.add("minimum_turning_radius", double_t, 0, "minimum turning radius in m of path / vehicle", 0.4, 0.0, 10.0)
grp_searching.add("reverse_penalty", double_t, 0, "For Reeds-Shepp model: penalty to apply if motion is reversing, must be => 1", 2.0, 1.0, 10.0)
grp_searching.add("change_penalty", double_t, 0, "penalty to apply if motion is changing directions, must be >= 0", 0.0, 0.0, 10.0)
grp_searching.add("non_straight_penalty", double_t, 0, "penalty to apply if motion is non-straight, must be => 1", 1.2, 1.0, 10.0)
grp_searching.add("cost_penalty", double_t, 0, "penalty to apply to higher cost areas when adding into the obstacle map dynamic programming distance expansion heuristic. This drives the robot more towards the center of passages. A value between 1.3 - 3.5 is reasonable.", 2.0, 1.0, 10.0)
grp_searching.add("retrospective_penalty", double_t, 0, "penalty to prefer later maneuvers before earlier along the path. Saves search time since earlier nodes are not expanded until it is necessary. Must be >= 0.0 and <= 1.0", 0.015, 0.0, 10.0)
grp_searching.add("use_quadratic_cost_penalty", bool_t, 0, "", False)
grp_searching.add("downsample_obstacle_heuristic", bool_t, 0, "", True)
grp_searching.add("lookup_table_size", double_t, 0, "Size of the dubin/reeds-shepp distance window to cache, in meters", 20.0, 0.0, 100.0)

exit(gen.generate(PACKAGE, "smac_planner_hybrid", "SmacPlannerHybrid"))
